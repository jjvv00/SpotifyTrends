[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SpotifyTrends",
    "section": "",
    "text": "1 Introduction\nEach person is a unique and diverse individual. Music is a vast and dynamic landscape, and personal preferences and the emotional impact of songs can vary widely person to person as well. We are in a digital age, where streaming service dominates. This allows the availability of extensive music libraries. From these streaming services, APIs open up new avenues for exploring the diverse facets of musical tastes and emotional resonance in numbers.\nAs mentioned earlier, there are a multitude of platforms to stream music. Pandora, Apple Music, Youtube, Amazon, and Spotify are popular choices. In most of these platforms, users are not only listeners. They are the curator of their own musical experiences. These platforms read the user’s data in order to make recommendations and playlists based on their listening preferences. With the “spotifyr” package, we could analyze the the emotions of an artist’s album and look at some insights of the user.\nOur decision to explore musical preferences through the Spotify R package is motivated by the desire to understand the intersection of personal taste, emotional connection, and shared musical experiences. By comparing the top tracks between two users, we aim to uncover similarities and differences that may reflect diverse musical journeys and influences. While it is unlikely to have overlap between our top 10 tracks, it is the moods of the artists that could be insightful. Using Spotify’s valence and energy variables as proxies for emotional content, we can compare the moods of artists’ albums. This approach allows us to not only appreciate individual songs but also to understand the broader emotional tapestry woven throughout an artist’s body of work.\nThis exploration not only contributes to our understanding of the intricacies of musical preferences but also sheds light on the emotional narratives woven into the fabric of music. By combining data-driven insights from the Spotify R package with the lyrical nuances revealed by the Genius package, we aim to offer a comprehensive perspective on the intersection of personal, emotional, and shared experiences within the realm of music. Through this project, we hope to unravel the richness of musical expression and its profound impact on individual and collective identities."
  },
  {
    "objectID": "data.html#technical-description",
    "href": "data.html#technical-description",
    "title": "2  Data",
    "section": "2.1 Technical description",
    "text": "2.1 Technical description\nWe will be accessing the Spotify Web API that provides us to a vast collection of music-related data. This could include information about tracks, albums, artists, and user-specific information. This data is collected and maintained by Spotify, a leading music streaming platform. Thus, we are assuming that Spotify is able to update the API frequently. There are not any obvious issues or problems with the data. We plan to retrieve data through the “spotifyr” R wrapper for pulling track audio features and other information from Spotify’s Web API in bulk (Thompson, Et al., 2022). The authors are Josia Parry, Donal Phipps, Tom Wolf, and Charlie Thompson, who also maintains the package. According to Thomposon’s Github, the last changes are from December 14, 2022.\nEven Oppenheimer completed a project called “Using Data to Find the Angriest Death Grips Song“ (Oppenheimer, 2022). We plan to follow this procedure in tandem with the valence and energy variables from the “spotifyr” R wrapper to analyze the moods of the songs. Our current concern is that Oppenheimer uses an r package, ‘genius,’ written by Josiah Parry with ’tidytext” by Julia Slige to count the number of angry words that are in songs. “genuis” package allows easy access to lyrics as text data, however, Parry announced on October 31, 2021, that he will not be maintaining the package due to the gray legal area (Parry, 2023) . On the other hand, “tidytext” was recently updated on September 5, 2023."
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "2.2 Description",
    "text": "2.2 Description\nComparative Analysis of Top Tracks:\nThe Spotify Web API provides access to user-specific data, including the top tracks for each user. By querying the API for both partners, we can retrieve information on their individual top tracks. The data includes details such as track name, artist, album, and popularity. Through the Spotify R package, we can seamlessly compare the top tracks, identifying commonalities and differences in musical preferences. Using the get_my_top_tracks function from the “spotifyr,” we can get the top tracks from each user. We can extract relevant details such as track name, artist, and album and save it to a data frame and visualize it.\nExploring Album Moods:\nLeveraging the Spotify API’s audio features, particularly valence and energy, we can analyze the mood dynamics of artists’ albums. Valence represents the musical positiveness, while energy represents the intensity and activity. By aggregating these features at the album level, we gain insights into the overall emotional content of each album. The Spotify R package allows us to efficiently extract and process this information, enabling us to explore patterns and themes in the emotional landscape of diverse artists. By utilizing the get_audio_features function from the “spotifyr,” we can obtain the valence and energy features for each track. Then. we can aggregate these features at the album level to represent the overall mood. Lastly, we can analyze patterns and trends in mood dynamics across different artists’ albums.\nLyrics and Emotional Expression:\nThe Genius R package provides access to song lyrics, allowing us to perform sentiment analysis and explore emotional expression in the lyrics of selected songs. By querying the Genius API through the “genuis” R package, we can retrieve lyrics for specific tracks of interest. Combining this textual data with the emotional features obtained from the Spotify API, we can deepen our understanding of how lyrics contribute to the overall emotional depth and resonance of the music. We can query the Genius API through the “genuis” to retrieve lyrics for selected tracks. Then we can perform sentiment analysis on the lyrics to quantify emotional expression based on the number of “angry” words identified by NRC’s standards with the help of “tidytext”.\nBy executing these data-driven analyses, we should be able to identify shared musical preferences and unique individual tastes based on top track analysis and visualize the emotional dynamics within albums, offering insights into how artists convey mood through their music. Our project aims to contribute meaningful insights into the intricate relationship between personal music preferences, emotional resonance, and the broader artistic expression found within the world of music."
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.3 Missing value analysis",
    "text": "2.3 Missing value analysis\n\n\nCode\nlibrary(spotifyr)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(knitr)\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n✔ readr     2.1.4     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nSys.setenv(SPOTIFY_CLIENT_ID = \"d895b3472cb743c581bc155bd97d3c4e\", SPOTIFY_CLIENT_SECRET = \"348918affcf741d8841b9445b693c0d4\")\n\ntoken &lt;- get_spotify_access_token()\n\n\n\n\nCode\n# For Taylor Swift \nTS &lt;- get_artist_audio_features('taylor swift')\n\nNA_countsTS &lt;- colSums(is.na(TS))\n\nna_dataTS &lt;- data.frame(column = names(NA_countsTS), NA_countTS = NA_countsTS)\n\nggplot(na_dataTS, aes(x = column, y = NA_countTS, fill = NA_countTS)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  labs(title = \"Count of NAs in Each Column for Taylor Swift\", x = \"Column\", y = \"Number of NA Values\") +\n  theme_minimal() + \n  theme(axis.text.x = element_text(size = 8, angle = 50, hjust = 1)) +\n  geom_text(aes(label = NA_countTS), vjust = -0.5, size = 3)\n\n\n\n\n\n\n\nCode\n# For Fleetwood Mac\nFM &lt;- get_artist_audio_features('fleetwood mac')\n\nNA_countsFM &lt;- colSums(is.na(FM))\n\nna_dataFM &lt;- data.frame(column = names(NA_countsFM), NA_countFM = NA_countsFM)\n\nggplot(na_dataFM, aes(x = column, y = NA_countFM, fill = NA_countFM)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  labs(title = \"Count of NAs in Each Column for Fleetwood Mac\", x = \"Column\", y = \"Number of NA Values\") +\n  theme_minimal() + \n  theme(axis.text.x = element_text(size = 8, angle = 50, hjust = 1)) + \n  geom_text(aes(label = NA_countFM), vjust = -0.5, size = 3)\n\n\n\n\n\n\n\nCode\n# For Doja Cat\nDC &lt;- get_artist_audio_features('doja cat')\n\nNA_countsDC &lt;- colSums(is.na(DC))\n\nna_dataDC &lt;- data.frame(column = names(NA_countsDC), NA_countDC = NA_countsDC)\n\nggplot(na_dataDC, aes(x = column, y = NA_countDC, fill = NA_countDC)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  labs(title = \"Count of NAs in Each Column for Doja Cat\", x = \"Column\", y = \"Number of NA Values\") +\n  theme_minimal() + \n  theme(axis.text.x = element_text(size = 8, angle = 50, hjust = 1)) + \n  geom_text(aes(label = NA_countDC), vjust = -0.5, size = 3)\n\n\n\n\n\n\n\nCode\n# For Peso Pluma\nPP &lt;- get_artist_audio_features('peso pluma')\nView(PP)\n\nNA_countsPP &lt;- colSums(is.na(PP))\n\nna_dataPP &lt;- data.frame(column = names(NA_countsPP), NA_countPP = NA_countsPP)\n\nggplot(na_dataPP, aes(x = column, y = NA_countPP, fill = NA_countPP)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  labs(title = \"Count of NAs in Each Column for Peso Pluma\", x = \"Column\", y = \"Number of NA Values\") +\n  theme_minimal() + \n  theme(axis.text.x = element_text(size = 8, angle = 50, hjust = 1)) + \n  geom_text(aes(label = NA_countPP), vjust = -0.5, size = 3)"
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "```"
  }
]